import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class AirlineScheduler {

    private PassengerRegistry passengerRegistry;
    private Set<AirplaneRoute> schedule = new TreeSet<>();

    public AirlineScheduler(PassengerRegistry registry) {
        this.passengerRegistry = registry;
    }

    public void addRoute(AirplaneRoute route) {
        schedule.add(route);
    }

    public void loadFlightsFromFile(String filePath) {
        try {
            File file = new File(filePath);
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    if (!line.isEmpty()) {
                        parseFlightData(line);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println(filePath + " could not be found.");
            System.exit(0);
        }
    }

    private void parseFlightData(String data) {
        try {
            String[] tokens = data.split(",");
            String code = tokens[0];
            String destination = tokens[1];
            String airline = tokens[2];
            int capacity = Integer.parseInt(tokens[3]);
            double weightLimit = Double.parseDouble(tokens[4]);
            double volumeLimit = Double.parseDouble(tokens[5]);

            AirplaneRoute route = new AirplaneRoute(code, destination, airline, capacity, weightLimit, volumeLimit);
            addRoute(route);

        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {
            System.out.println("Error processing line: '" + data + "'. Error: " + e.getMessage());
        }
    }

    public AirplaneRoute findRouteByCode(String code) {
        return schedule.stream()
                .filter(route -> code.equals(route.getCode()))
                .findFirst()
                .orElse(null);
    }

    public void generateReport(String reportPath) {
        try (FileWriter writer = new FileWriter(reportPath)) {
            writer.write(formatFlightReport());
        } catch (IOException e) {
            System.out.println("An error occurred while writing to " + reportPath);
            System.exit(0);
        }
    }

    private String formatFlightReport() {
        
    }

    private String determineObservations(AirplaneRoute route, double volume, double weight) {
        if (volume > route.getLuggageVolumeLimit() && weight > route.getLuggageWeightLimit()) {
            return "Maximum volume and weight exceeded!";
        } else if (volume <= route.getLuggageVolumeLimit() && weight > route.getLuggageWeightLimit()) {
            return "Maximum baggage weight exceeded!";
        } else if (volume > route.getLuggageVolumeLimit() && weight <= route.getLuggageWeightLimit()) {
            return "Maximum baggage volume exceeded!";
        } else {
            return "";
        }
    }
}
